name: Publish DNAPass to GitHub Releases

on:
  push:
    tags:
      - 'v*'  # Publishes when a version tag (e.g., v0.1.3) is created

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up compiler (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y cmake g++
      shell: bash

    - name: Set up compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake gcc
      shell: bash

    - name: Set up compiler (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        choco install mingw -y
      shell: pwsh

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release
        fi
      shell: bash

    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel
      shell: bash

    - name: Create release assets directory
      run: |
        mkdir -p release_assets
      shell: bash

    - name: Prepare release asset (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        cp dnapass_generator ../release_assets/dnapass_generator-linux
        chmod +x ../release_assets/dnapass_generator-linux
      shell: bash

    - name: Prepare release asset (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build
        cp dnapass_generator ../release_assets/dnapass_generator-macos
        chmod +x ../release_assets/dnapass_generator-macos
      shell: bash

    - name: Prepare release asset (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cp dnapass_generator.exe ../release_assets/dnapass_generator-windows.exe
      shell: bash

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: release_assets/
        retention-days: 1

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: release_assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
