name: DNAPass Password Generator CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Debug - Show commit and file content (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo Current commit:
        git log -1
        echo Content of dnapass_generator.cpp:
        if exist dnapass_password_generator\dnapass_generator.cpp (
          type dnapass_password_generator\dnapass_generator.cpp
        ) else (
          echo Error: dnapass_generator.cpp not found
          exit 1
        )
      shell: cmd

    - name: Debug - Show commit and file content (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Current commit:"
        git log -1
        echo "Content of dnapass_generator.cpp:"
        if [ -f dnapass_password_generator/dnapass_generator.cpp ]; then
          cat dnapass_password_generator/dnapass_generator.cpp
        else
          echo "Error: dnapass_generator.cpp not found"
          exit 1
        fi
      shell: bash

    - name: Set up Homebrew (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if ! command -v brew >/dev/null 2>&1; then
          echo "Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "PATH=/usr/local/bin:/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set up compiler (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++ cmake
          echo "CMAKE_CXX_COMPILER=g++" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang cmake
          echo "CMAKE_CXX_COMPILER=clang++" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set up compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
          echo "CMAKE_CXX_COMPILER=$(brew --prefix gcc)/bin/g++" >> $GITHUB_ENV
        else
          brew install llvm
          echo "CMAKE_CXX_COMPILER=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set up compiler (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake.install --no-progress
        choco install mingw --no-progress
        echo "C:\ProgramData\chocolatey\bin" >> %GITHUB_PATH%
        echo "C:\Program Files\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin" >> %GITHUB_PATH%
        echo "CMAKE_CXX_COMPILER=g++" >> %GITHUB_ENV%
      shell: cmd

    - name: Verify compiler setup (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        where g++
        g++ --version || (echo "Error: g++ not found or not working" && exit 1)
      shell: cmd

    - name: Install clang-tidy (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get install -y clang-tidy
        else
          brew install llvm
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
        fi
      shell: bash

    - name: Create and change to build directory (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if not exist build mkdir build
        cd build
        echo Current directory: %CD%
      shell: cmd

    - name: Debug - Verify CMakeLists.txt (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if exist CMakeLists.txt (
          echo CMakeLists.txt found
          type CMakeLists.txt
        ) else (
          echo Error: CMakeLists.txt not found
          exit 1
        )
      shell: cmd

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake .. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug
      shell: cmd

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_CXX_COMPILER=${{ env.CMAKE_CXX_COMPILER }} -DCMAKE_BUILD_TYPE=Debug
      shell: bash

    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake --build . --config Debug -v
        dir
      shell: cmd

    - name: Build project (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        cmake --build . --config Debug -v
      shell: bash

    - name: Run clang-tidy (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
elect: |
        cd build
        clang-tidy ../dnapass_password_generator/*.cpp -- -std=c++17
      shell: bash

    - name: Test executable (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build
        ./dnapass_generator <<< "12"
      shell: bash

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        if not exist dnapass_generator.exe (
          echo Error: dnapass_generator.exe not found in %CD%
          dir
          exit 1
        )
        echo 12 | .\dnapass_generator.exe
        echo Current directory: %CD%
        dir
      shell: cmd
